#!/usr/bin/env python3
"""
Script ƒë·ªÉ chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ ti·∫øng Vi·ªát trong metadata.csv
Gi√∫p model hi·ªÉu t·ªët h∆°n v√† tr√°nh l·ªói "Character not found"
"""

import os
import re

def number_to_vietnamese_words(number):
    """Chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ ti·∫øng Vi·ªát"""
    # Mapping s·ªë c∆° b·∫£n
    units = ['', 'm·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n']
    teens = ['m∆∞·ªùi', 'm∆∞·ªùi m·ªôt', 'm∆∞·ªùi hai', 'm∆∞·ªùi ba', 'm∆∞·ªùi b·ªën', 'm∆∞·ªùi lƒÉm', 
             'm∆∞·ªùi s√°u', 'm∆∞·ªùi b·∫£y', 'm∆∞·ªùi t√°m', 'm∆∞·ªùi ch√≠n']
    
    if number == 0:
        return 'kh√¥ng'
    elif number < 10:
        return units[number]
    elif number < 20:
        return teens[number - 10]
    elif number < 100:
        if number % 10 == 0:
            return units[number // 10] + ' m∆∞∆°i'
        elif number % 10 == 1:
            return units[number // 10] + ' m∆∞∆°i m·ªët'
        elif number % 10 == 5:
            return units[number // 10] + ' m∆∞∆°i lƒÉm'
        else:
            return units[number // 10] + ' m∆∞∆°i ' + units[number % 10]
    elif number < 1000:
        if number % 100 == 0:
            return units[number // 100] + ' trƒÉm'
        else:
            return units[number // 100] + ' trƒÉm ' + number_to_vietnamese_words(number % 100)
    else:
        return str(number)  # Gi·ªØ nguy√™n s·ªë l·ªõn

def convert_text_numbers_to_words(text):
    """Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ s·ªë trong text th√†nh ch·ªØ"""
    def replace_number(match):
        number_str = match.group(0)
        try:
            number = int(number_str)
            return number_to_vietnamese_words(number)
        except ValueError:
            return number_str
    
    # T√¨m v√† thay th·∫ø c√°c s·ªë
    return re.sub(r'\b\d+\b', replace_number, text)

def process_metadata(input_file, output_file):
    """X·ª≠ l√Ω file metadata.csv"""
    print(f"üîÑ ƒêang x·ª≠ l√Ω file: {input_file}")
    
    if not os.path.exists(input_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {input_file}")
        return False
    
    # ƒê·ªçc file g·ªëc
    with open(input_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print(f"üìä T·ªïng s·ªë d√≤ng: {len(lines)}")
    
    # X·ª≠ l√Ω t·ª´ng d√≤ng
    converted_lines = []
    for i, line in enumerate(lines):
        line = line.strip()
        if '|' in line:
            parts = line.split('|')
            if len(parts) >= 2:
                filename = parts[0]
                text = parts[1]
                
                # Chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ
                converted_text = convert_text_numbers_to_words(text)
                
                # T·∫°o d√≤ng m·ªõi
                new_line = f"{filename}|{converted_text}"
                converted_lines.append(new_line)
                
                # Hi·ªÉn th·ªã v√≠ d·ª•
                if i < 5:
                    print(f"  D√≤ng {i+1}:")
                    print(f"    G·ªëc: {text}")
                    print(f"    M·ªõi: {converted_text}")
                    print()
            else:
                converted_lines.append(line)
        else:
            converted_lines.append(line)
    
    # Ghi file m·ªõi
    with open(output_file, 'w', encoding='utf-8') as f:
        for line in converted_lines:
            f.write(line + '\n')
    
    print(f"‚úÖ ƒê√£ l∆∞u file m·ªõi: {output_file}")
    print(f"üìù S·ªë d√≤ng ƒë√£ x·ª≠ l√Ω: {len(converted_lines)}")
    
    return True

def main():
    """H√†m ch√≠nh"""
    # ƒê∆∞·ªùng d·∫´n file
    current_path = os.path.dirname(os.path.abspath(__file__))
    dataset_path = os.path.join(current_path, "..", "data", "training_data", "dataset")
    input_file = os.path.join(dataset_path, "metadata.csv")
    output_file = os.path.join(dataset_path, "metadata_converted.csv")
    
    print("üöÄ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ ti·∫øng Vi·ªát...")
    print(f"üìÅ Th∆∞ m·ª•c dataset: {dataset_path}")
    print(f"üìÑ File g·ªëc: {input_file}")
    print(f"üìÑ File m·ªõi: {output_file}")
    print()
    
    # X·ª≠ l√Ω file
    success = process_metadata(input_file, output_file)
    
    if success:
        print()
        print("üéâ Ho√†n th√†nh chuy·ªÉn ƒë·ªïi!")
        print("üí° B·∫°n c√≥ th·ªÉ:")
        print("   1. Sao l∆∞u file g·ªëc: metadata.csv -> metadata_original.csv")
        print("   2. ƒê·ªïi t√™n file m·ªõi: metadata_converted.csv -> metadata.csv")
        print("   3. Ch·∫°y l·∫°i script finetune")
        print()
        print("üìã L·ªánh th·ª±c hi·ªán:")
        print(f"   cd {dataset_path}")
        print("   copy metadata.csv metadata_original.csv")
        print("   copy metadata_converted.csv metadata.csv")
    else:
        print("‚ùå C√≥ l·ªói x·∫£y ra!")

if __name__ == "__main__":
    main()
